// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/manabie-com/togo/internal/models"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: ctx, task
func (_m *Store) AddTask(ctx context.Context, task *models.Task) (*models.Task, error) {
	ret := _m.Called(ctx, task)

	var r0 *models.Task
	if rf, ok := ret.Get(0).(func(context.Context, *models.Task) *models.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, userID
func (_m *Store) GetUserByID(ctx context.Context, userID string) (*models.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveTasks provides a mock function with given fields: ctx, userID, from, to
func (_m *Store) RetrieveTasks(ctx context.Context, userID string, from time.Time, to time.Time) (*[]models.Task, error) {
	ret := _m.Called(ctx, userID, from, to)

	var r0 *[]models.Task
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) *[]models.Task); ok {
		r0 = rf(ctx, userID, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Task)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) error); ok {
		r1 = rf(ctx, userID, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveUserMaxTodoAndTaskCount provides a mock function with given fields: ctx, userID, from, to
func (_m *Store) RetrieveUserMaxTodoAndTaskCount(ctx context.Context, userID string, from time.Time, to time.Time) (int, int, error) {
	ret := _m.Called(ctx, userID, from, to)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time, time.Time) int); ok {
		r0 = rf(ctx, userID, from, to)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time, time.Time) int); ok {
		r1 = rf(ctx, userID, from, to)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, string, time.Time, time.Time) error); ok {
		r2 = rf(ctx, userID, from, to)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
